//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp1.documotive {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="documotive.IEDRMWebService")]
    public interface IEDRMWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchFile", ReplyAction="http://tempuri.org/IEDRMWebService/SearchFileResponse")]
        string SearchFile(string repository, System.Collections.Generic.Dictionary<string, string> searchTerms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchFile", ReplyAction="http://tempuri.org/IEDRMWebService/SearchFileResponse")]
        System.Threading.Tasks.Task<string> SearchFileAsync(string repository, System.Collections.Generic.Dictionary<string, string> searchTerms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchFileByID", ReplyAction="http://tempuri.org/IEDRMWebService/SearchFileByIDResponse")]
        string SearchFileByID(string repository, int documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchFileByID", ReplyAction="http://tempuri.org/IEDRMWebService/SearchFileByIDResponse")]
        System.Threading.Tasks.Task<string> SearchFileByIDAsync(string repository, int documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/Retrieve", ReplyAction="http://tempuri.org/IEDRMWebService/RetrieveResponse")]
        byte[] Retrieve(string repository, int documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/Retrieve", ReplyAction="http://tempuri.org/IEDRMWebService/RetrieveResponse")]
        System.Threading.Tasks.Task<byte[]> RetrieveAsync(string repository, int documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ListFolder", ReplyAction="http://tempuri.org/IEDRMWebService/ListFolderResponse")]
        string ListFolder(string repository, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ListFolder", ReplyAction="http://tempuri.org/IEDRMWebService/ListFolderResponse")]
        System.Threading.Tasks.Task<string> ListFolderAsync(string repository, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ListDocuments", ReplyAction="http://tempuri.org/IEDRMWebService/ListDocumentsResponse")]
        string ListDocuments(string repository, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ListDocuments", ReplyAction="http://tempuri.org/IEDRMWebService/ListDocumentsResponse")]
        System.Threading.Tasks.Task<string> ListDocumentsAsync(string repository, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/GetDocuments", ReplyAction="http://tempuri.org/IEDRMWebService/GetDocumentsResponse")]
        string GetDocuments(string repository, int[] documentIDs, string retrievePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/GetDocuments", ReplyAction="http://tempuri.org/IEDRMWebService/GetDocumentsResponse")]
        System.Threading.Tasks.Task<string> GetDocumentsAsync(string repository, int[] documentIDs, string retrievePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/StoreDocument", ReplyAction="http://tempuri.org/IEDRMWebService/StoreDocumentResponse")]
        string StoreDocument(string repository, int ID, byte[] documentContent, string fileName, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/StoreDocument", ReplyAction="http://tempuri.org/IEDRMWebService/StoreDocumentResponse")]
        System.Threading.Tasks.Task<string> StoreDocumentAsync(string repository, int ID, byte[] documentContent, string fileName, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchAcrossRepositories", ReplyAction="http://tempuri.org/IEDRMWebService/SearchAcrossRepositoriesResponse")]
        string SearchAcrossRepositories(string[] repositoryPaths, System.Collections.Generic.Dictionary<string, string> searchTerms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/SearchAcrossRepositories", ReplyAction="http://tempuri.org/IEDRMWebService/SearchAcrossRepositoriesResponse")]
        System.Threading.Tasks.Task<string> SearchAcrossRepositoriesAsync(string[] repositoryPaths, System.Collections.Generic.Dictionary<string, string> searchTerms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ViewAuditTrail", ReplyAction="http://tempuri.org/IEDRMWebService/ViewAuditTrailResponse")]
        string ViewAuditTrail(string repository, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/ViewAuditTrail", ReplyAction="http://tempuri.org/IEDRMWebService/ViewAuditTrailResponse")]
        System.Threading.Tasks.Task<string> ViewAuditTrailAsync(string repository, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/DrillUpTreeView", ReplyAction="http://tempuri.org/IEDRMWebService/DrillUpTreeViewResponse")]
        string DrillUpTreeView(string repository, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/DrillUpTreeView", ReplyAction="http://tempuri.org/IEDRMWebService/DrillUpTreeViewResponse")]
        System.Threading.Tasks.Task<string> DrillUpTreeViewAsync(string repository, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/CreateTopLevelFolder", ReplyAction="http://tempuri.org/IEDRMWebService/CreateTopLevelFolderResponse")]
        string CreateTopLevelFolder(string repository, int parentFolder, string folderName, string structureName, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/CreateTopLevelFolder", ReplyAction="http://tempuri.org/IEDRMWebService/CreateTopLevelFolderResponse")]
        System.Threading.Tasks.Task<string> CreateTopLevelFolderAsync(string repository, int parentFolder, string folderName, string structureName, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/UpdateMetaData", ReplyAction="http://tempuri.org/IEDRMWebService/UpdateMetaDataResponse")]
        string UpdateMetaData(string repository, int ID, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/UpdateMetaData", ReplyAction="http://tempuri.org/IEDRMWebService/UpdateMetaDataResponse")]
        System.Threading.Tasks.Task<string> UpdateMetaDataAsync(string repository, int ID, System.Collections.Generic.Dictionary<string, string> indexInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/MoveDocument", ReplyAction="http://tempuri.org/IEDRMWebService/MoveDocumentResponse")]
        string MoveDocument(string sourceRepository, int id, string targetRepository, int targetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEDRMWebService/MoveDocument", ReplyAction="http://tempuri.org/IEDRMWebService/MoveDocumentResponse")]
        System.Threading.Tasks.Task<string> MoveDocumentAsync(string sourceRepository, int id, string targetRepository, int targetID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEDRMWebServiceChannel : ConsoleApp1.documotive.IEDRMWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EDRMWebServiceClient : System.ServiceModel.ClientBase<ConsoleApp1.documotive.IEDRMWebService>, ConsoleApp1.documotive.IEDRMWebService {
        
        public EDRMWebServiceClient() {
        }
        
        public EDRMWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EDRMWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EDRMWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EDRMWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SearchFile(string repository, System.Collections.Generic.Dictionary<string, string> searchTerms) {
            return base.Channel.SearchFile(repository, searchTerms);
        }
        
        public System.Threading.Tasks.Task<string> SearchFileAsync(string repository, System.Collections.Generic.Dictionary<string, string> searchTerms) {
            return base.Channel.SearchFileAsync(repository, searchTerms);
        }
        
        public string SearchFileByID(string repository, int documentID) {
            return base.Channel.SearchFileByID(repository, documentID);
        }
        
        public System.Threading.Tasks.Task<string> SearchFileByIDAsync(string repository, int documentID) {
            return base.Channel.SearchFileByIDAsync(repository, documentID);
        }
        
        public byte[] Retrieve(string repository, int documentID) {
            return base.Channel.Retrieve(repository, documentID);
        }
        
        public System.Threading.Tasks.Task<byte[]> RetrieveAsync(string repository, int documentID) {
            return base.Channel.RetrieveAsync(repository, documentID);
        }
        
        public string ListFolder(string repository, int folderID) {
            return base.Channel.ListFolder(repository, folderID);
        }
        
        public System.Threading.Tasks.Task<string> ListFolderAsync(string repository, int folderID) {
            return base.Channel.ListFolderAsync(repository, folderID);
        }
        
        public string ListDocuments(string repository, int folderID) {
            return base.Channel.ListDocuments(repository, folderID);
        }
        
        public System.Threading.Tasks.Task<string> ListDocumentsAsync(string repository, int folderID) {
            return base.Channel.ListDocumentsAsync(repository, folderID);
        }
        
        public string GetDocuments(string repository, int[] documentIDs, string retrievePath) {
            return base.Channel.GetDocuments(repository, documentIDs, retrievePath);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentsAsync(string repository, int[] documentIDs, string retrievePath) {
            return base.Channel.GetDocumentsAsync(repository, documentIDs, retrievePath);
        }
        
        public string StoreDocument(string repository, int ID, byte[] documentContent, string fileName, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.StoreDocument(repository, ID, documentContent, fileName, indexInformation);
        }
        
        public System.Threading.Tasks.Task<string> StoreDocumentAsync(string repository, int ID, byte[] documentContent, string fileName, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.StoreDocumentAsync(repository, ID, documentContent, fileName, indexInformation);
        }
        
        public string SearchAcrossRepositories(string[] repositoryPaths, System.Collections.Generic.Dictionary<string, string> searchTerms) {
            return base.Channel.SearchAcrossRepositories(repositoryPaths, searchTerms);
        }
        
        public System.Threading.Tasks.Task<string> SearchAcrossRepositoriesAsync(string[] repositoryPaths, System.Collections.Generic.Dictionary<string, string> searchTerms) {
            return base.Channel.SearchAcrossRepositoriesAsync(repositoryPaths, searchTerms);
        }
        
        public string ViewAuditTrail(string repository, int ID) {
            return base.Channel.ViewAuditTrail(repository, ID);
        }
        
        public System.Threading.Tasks.Task<string> ViewAuditTrailAsync(string repository, int ID) {
            return base.Channel.ViewAuditTrailAsync(repository, ID);
        }
        
        public string DrillUpTreeView(string repository, int ID) {
            return base.Channel.DrillUpTreeView(repository, ID);
        }
        
        public System.Threading.Tasks.Task<string> DrillUpTreeViewAsync(string repository, int ID) {
            return base.Channel.DrillUpTreeViewAsync(repository, ID);
        }
        
        public string CreateTopLevelFolder(string repository, int parentFolder, string folderName, string structureName, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.CreateTopLevelFolder(repository, parentFolder, folderName, structureName, indexInformation);
        }
        
        public System.Threading.Tasks.Task<string> CreateTopLevelFolderAsync(string repository, int parentFolder, string folderName, string structureName, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.CreateTopLevelFolderAsync(repository, parentFolder, folderName, structureName, indexInformation);
        }
        
        public string UpdateMetaData(string repository, int ID, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.UpdateMetaData(repository, ID, indexInformation);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMetaDataAsync(string repository, int ID, System.Collections.Generic.Dictionary<string, string> indexInformation) {
            return base.Channel.UpdateMetaDataAsync(repository, ID, indexInformation);
        }
        
        public string MoveDocument(string sourceRepository, int id, string targetRepository, int targetID) {
            return base.Channel.MoveDocument(sourceRepository, id, targetRepository, targetID);
        }
        
        public System.Threading.Tasks.Task<string> MoveDocumentAsync(string sourceRepository, int id, string targetRepository, int targetID) {
            return base.Channel.MoveDocumentAsync(sourceRepository, id, targetRepository, targetID);
        }
    }
}
